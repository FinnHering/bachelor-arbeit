@online{apptainerApptainerPortableReproducible,
  title = {Apptainer - {{Portable}}, {{Reproducible Containers}}},
  author = {Apptainer},
  url = {https://apptainer.org/},
  urldate = {2025-01-28},
  file = {/Users/finn/Zotero/storage/8ZDQE2PB/apptainer.org.html}
}

@online{apptainerSecurityApptainerApptainer,
  title = {Security in {{Apptainer}} — {{Apptainer User Guide}} Main Documentation},
  author = {Apptainer},
  url = {https://apptainer.org/docs/user/main/security.html#singularity-image-format-sif},
  urldate = {2025-01-28},
  file = {/Users/finn/Zotero/storage/UN46KGMZ/security.html}
}

@article{bentalebContainerizationTechnologiesTaxonomies2022,
  title = {Containerization Technologies: Taxonomies, Applications and Challenges},
  shorttitle = {Containerization Technologies},
  author = {Bentaleb, Ouafa and Belloum, Adam S. Z. and Sebaa, Abderrazak and El-Maouhab, Aouaouche},
  date = {2022-01-01},
  journaltitle = {The Journal of Supercomputing},
  shortjournal = {J Supercomput},
  volume = {78},
  number = {1},
  pages = {1144--1181},
  issn = {1573-0484},
  doi = {10.1007/s11227-021-03914-1},
  url = {https://doi.org/10.1007/s11227-021-03914-1},
  urldate = {2024-10-31},
  abstract = {Modern scientific research challenges require new technologies, integrated tools, reusable and complex experiments in distributed computing infrastructures. But above all, computing power for efficient data processing and analyzing. Containers technologies have emerged as a new paradigm to address such intensive scientific applications problems. Their easy deployment in a reasonable amount of time and the few required computational resource make them more suitable. Containers are considered light virtualization solutions. They enable performance isolation and flexible deployment of complex, parallel, and high-performance systems. Moreover, they gained popularity to modernize and migrate scientific applications in computing infrastructure management. Additionally, they reduce computational time processing. In this paper, we first give an overview of virtualization and containerization technologies. We discuss the taxonomies of containerization technologies of the literature, and then we provide a new one that covers and completes those proposed in the literature. We identify the most important application domains of containerization and their technological progress. Furthermore, we discuss the performance metrics used in most containerization techniques. Finally, we point out research gaps in the related aspects of containerization technology that require more research.},
  langid = {english},
  keywords = {Computing,Container,Micro-services,Orchestrator,Parallel,Quantum Computing,Scientific application,Virtualization},
  file = {/Users/finn/Zotero/storage/D3YZHNXZ/Bentaleb et al. - 2022 - Containerization technologies taxonomies, applications and challenges.pdf}
}

@online{DockerAcceleratedContainer2024,
  title = {Docker: {{Accelerated Container Application Development}}},
  shorttitle = {Docker},
  date = {2024},
  url = {https://www.docker.com/},
  urldate = {2025-01-28},
  abstract = {Docker is a platform designed to help developers build, share, and run container applications. We handle the tedious setup, so you can focus on the code.},
  langid = {american},
  file = {/Users/finn/Zotero/storage/L9AYK26W/www.docker.com.html}
}

@online{dockerBake,
  title = {Bake},
  author = {Docker},
  url = {https://docs.docker.com/build/bake/},
  urldate = {2025-01-28},
  langid = {english},
  organization = {Docker Documentation},
  file = {/Users/finn/Zotero/storage/UDYURW93/bake.html}
}

@online{dockerBuildKit,
  title = {{{BuildKit}}},
  author = {Docker},
  url = {https://docs.docker.com/build/buildkit/},
  urldate = {2025-01-28},
  abstract = {Introduction and overview of BuildKit},
  langid = {english},
  organization = {Docker Documentation},
  file = {/Users/finn/Zotero/storage/IIBAHBH3/buildkit.html}
}

@online{dockerCache,
  title = {Cache},
  author = {Docker},
  url = {https://docs.docker.com/build/cache/},
  urldate = {2025-01-28},
  abstract = {Improve your build speed with effective use of the build cache},
  langid = {english},
  organization = {Docker Documentation},
  file = {/Users/finn/Zotero/storage/LRUG6BJM/cache.html}
}

@online{dockerDockerBuildx,
  title = {Docker Buildx},
  author = {Docker},
  url = {https://docs.docker.com/reference/cli/docker/buildx/},
  urldate = {2025-01-28},
  langid = {english},
  organization = {Docker Documentation},
  file = {/Users/finn/Zotero/storage/HQXMSQR2/buildx.html}
}

@online{dockerDockerfileOverview,
  title = {Dockerfile Overview},
  author = {Docker},
  url = {https://docs.docker.com/build/concepts/dockerfile/},
  urldate = {2025-01-28},
  abstract = {Learn about Dockerfiles and how to use them with Docker Images to build and package your software},
  langid = {english},
  organization = {Docker Documentation},
  file = {/Users/finn/Zotero/storage/BSFP8ARI/dockerfile.html}
}

@article{ermakovTestingDockerPerformance2017,
  title = {Testing {{Docker Performance}} for {{HPC Applications}}},
  author = {Ermakov, Alexey and Vasyukov, Alexey},
  date = {2017-04-18},
  doi = {10.48550/arXiv.1704.05592},
  abstract = {The main goal for this article is to compare performance penalties when using KVM virtualization and Docker containers for creating isolated environments for HPC applications. The article provides both data obtained using commonly accepted synthetic tests (High Performance Linpack) and real life applications (OpenFOAM). The article highlights the influence on resulting application performance of major infrastructure configuration options: CPU type presented to VM, networking connection type used.},
  file = {/Users/finn/Zotero/storage/SZNYLCVW/Ermakov und Vasyukov - 2017 - Testing Docker Performance for HPC Applications.pdf}
}

@online{githubGitHubActions,
  title = {{{GitHub Actions}}},
  author = {GitHub, Inc},
  url = {https://github.com/features/actions},
  urldate = {2025-01-28},
  abstract = {Easily build, package, release, update, and deploy your project in any language—on GitHub or any external system—without having to run code yourself.},
  langid = {english},
  organization = {GitHub},
  file = {/Users/finn/Zotero/storage/2E2IBJGK/actions.html}
}

@inproceedings{kaliberaRigorousBenchmarkingReasonable2013,
  title = {Rigorous Benchmarking in Reasonable Time},
  booktitle = {Proceedings of the 2013 International Symposium on Memory Management},
  author = {Kalibera, Tomas and Jones, Richard},
  date = {2013-06-20},
  series = {{{ISMM}} '13},
  pages = {63--74},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/2491894.2464160},
  url = {https://dl.acm.org/doi/10.1145/2491894.2464160},
  urldate = {2025-01-22},
  abstract = {Experimental evaluation is key to systems research. Because modern systems are complex and non-deterministic, good experimental methodology demands that researchers account for uncertainty. To obtain valid results, they are expected to run many iterations of benchmarks, invoke virtual machines (VMs) several times, or even rebuild VM or benchmark binaries more than once. All this repetition costs time to complete experiments. Currently, many evaluations give up on sufficient repetition or rigorous statistical methods, or even run benchmarks only in training sizes. The results reported often lack proper variation estimates and, when a small difference between two systems is reported, some are simply unreliable.In contrast, we provide a statistically rigorous methodology for repetition and summarising results that makes efficient use of experimentation time. Time efficiency comes from two key observations. First, a given benchmark on a given platform is typically prone to much less non-determinism than the common worst-case of published corner-case studies. Second, repetition is most needed where most uncertainty arises (whether between builds, between executions or between iterations). We capture experimentation cost with a novel mathematical model, which we use to identify the number of repetitions at each level of an experiment necessary and sufficient to obtain a given level of precision.We present our methodology as a cookbook that guides researchers on the number of repetitions they should run to obtain reliable results. We also show how to present results with an effect size confidence interval. As an example, we show how to use our methodology to conduct throughput experiments with the DaCapo and SPEC CPU benchmarks on three recent platforms.},
  isbn = {978-1-4503-2100-6},
  file = {/Users/finn/Zotero/storage/2S9FIJD8/Kalibera und Jones - 2013 - Rigorous benchmarking in reasonable time.pdf}
}

@inproceedings{kuhnJULEAFlexibleStorage2017,
  title = {{{JULEA}}: {{A Flexible Storage Framework}} for {{HPC}}},
  shorttitle = {{{JULEA}}},
  booktitle = {High {{Performance Computing}}},
  author = {Kuhn, Michael},
  editor = {Kunkel, Julian M. and Yokota, Rio and Taufer, Michela and Shalf, John},
  date = {2017},
  pages = {712--723},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-67630-2_51},
  abstract = {JULEA is a flexible storage framework that allows offering arbitrary client interfaces to applications. To be able to rapidly prototype new approaches, it offers data and metadata backends that can either be client-side or server-side; backends for popular storage technologies such as POSIX, LevelDB and MongoDB have already been implemented. Additionally, JULEA allows dynamically adapting the I/O operations’ semantics and can thus be adjusted to different use-cases. It runs completely in user space, which eases development and debugging. Its goal is to provide a solid foundation for storage research and teaching.},
  isbn = {978-3-319-67630-2},
  langid = {english},
  keywords = {Flexible storage framework,High performance computing,Key-value store,Object store,Parallel file system},
  file = {/Users/finn/Zotero/storage/ZV63H426/Kuhn - 2017 - JULEA A Flexible Storage Framework for HPC.pdf}
}

@online{LeadingContainerizationTechnologies,
  title = {Leading Containerization Technologies 2023},
  url = {https://www.statista.com/statistics/1256245/containerization-technologies-software-market-share/},
  urldate = {2024-12-01},
  abstract = {In 2023, Docker accounted for over 32 percent market share of the containerization technologies market.},
  langid = {english},
  organization = {Statista},
  file = {/Users/finn/Zotero/storage/2K6VZQV9/containerization-technologies-software-market-share.html}
}

@inproceedings{majawExploringDataDistributions2023,
  title = {Exploring {{Data Distributions}} Using {{Box}} and {{Whisker Plot Analysis}}},
  booktitle = {2023 14th {{International Conference}} on {{Computing Communication}} and {{Networking Technologies}} ({{ICCCNT}})},
  author = {Majaw, Nangskhembor and Ahmed, Syed Sazzad},
  date = {2023-07},
  pages = {1--8},
  issn = {2473-7674},
  doi = {10.1109/ICCCNT56998.2023.10308191},
  url = {https://ieeexplore.ieee.org/abstract/document/10308191},
  urldate = {2025-02-03},
  abstract = {Data analysis plays a crucial role in decision-making processes in various industries. One common approach to analyzing data distributions is through the use of box and whisker plots. In this paper, we explore the use of box and whisker plot analysis as a tool for exploring data distributions. We discuss how this analysis can be used to compare and draw crucial information, determine the spread of data, and visualize the shape of the data distribution. Additionally, we describe a Windows application tool developed in VB.NET. that allows users to explore the data distributions using box and whisker plot. The application includes features such as the ability to import a CSV file, display its contents, select specific columns for analysis, scale down data values, generate box and whisker plots and draw important conclusions. We have applied the application tool in three varied datasets - salary, marks and movies and were able to draw some meaningful conclusions from the data distributions in the datasets.},
  eventtitle = {2023 14th {{International Conference}} on {{Computing Communication}} and {{Networking Technologies}} ({{ICCCNT}})},
  keywords = {Box and whisker plot,Data analysis,Data Analysis,Data visualization,decision making,Decision making,Exploratory data analysis,Industries,Motion pictures,Remuneration,Shape,VB.NET,Windows application},
  file = {/Users/finn/Zotero/storage/DRG52YJX/10308191.html}
}

@inproceedings{malanContainerizingCS50Standardizing2024,
  title = {Containerizing {{CS50}}: {{Standardizing Students}}' {{Programming Environments}}},
  shorttitle = {Containerizing {{CS50}}},
  booktitle = {Proceedings of the 2024 on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Malan, David J.},
  date = {2024-07-03},
  pages = {534--540},
  publisher = {ACM},
  location = {Milan Italy},
  doi = {10.1145/3649217.3653567},
  url = {https://dl.acm.org/doi/10.1145/3649217.3653567},
  urldate = {2024-10-31},
  abstract = {We argue in favor of Docker containers as alternatives to clusters of servers or virtual machines for students in introductory programming courses. We present our experience with the same since 2015 in CS50 at Harvard University as well as the pedagogical and operational motivations therefor. We present, too, the evolution of our environments for students over the years, from an on-campus cluster, to an off-campus cloud, to client-side virtual machines, to Docker containers, discussing the trade-offs of each. Not only do containers provide students with a standardized environment, reducing technical difficulties and frequently asked questions at term’s start, they also provide instructors with full control over the software in use and versions thereof, additionally allowing instructors to deploy updates mid-semester. Particularly for large courses with hundreds or even thousands of students, containers allow staff to focus more of their time on teaching than on technical support. And, coupled with text editors that support extensions or plugins, containers allow instructors to optimize students’ environment for learning, while still acquainting students with industry-standard tools. Most recently implemented atop GitHub Codespaces, a cloud-based version of Visual Studio Code, our own container-based solutions have since been used by more than 700,000 students and teachers, both on campus and off, and are also freely available to any teacher or student outside of our own university.},
  eventtitle = {{{ITiCSE}} 2024: {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  isbn = {9798400706004},
  langid = {english},
  file = {/Users/finn/Zotero/storage/SR6UYDT5/Malan - 2024 - Containerizing CS50 Standardizing Students' Programming Environments.pdf}
}

@inproceedings{nEvaluationDockerContainers2015,
  title = {Evaluation of {{Docker}} Containers Based on Hardware Utilization},
  booktitle = {2015 {{International Conference}} on {{Control Communication}} \& {{Computing India}} ({{ICCC}})},
  author = {N, Preeth E. and Mulerickal, Fr. Jaison Paul and Paul, Biju and Sastri, Yedhu},
  date = {2015-11},
  pages = {697--700},
  doi = {10.1109/ICCC.2015.7432984},
  url = {https://ieeexplore.ieee.org/abstract/document/7432984},
  urldate = {2024-10-31},
  abstract = {Docker is an open platform for developers and system administrators to build, ship, and run distributed applications using Docker Engine, a portable, lightweight runtime and packaging tool, and Docker Hub, a cloud service for sharing applications and automating workflows. The main advantage is that, Docker can get code tested and deployed into production as fast as possible. Different applications can be run over Docker containers with language independency. In this paper the performance of these Docker containers are evaluated based on their system performance. That is based on system resource utilization. Different benchmarking tools are used for this. Performance based on file system is evaluated using Bonnie++. Other system resources such as CPU utilization, memory utilization etc. are evaluated based on the benchmarking code (using psutil) developed using python. Detail results obtained from all these tests are also included in this paper. The results include CPU utilization, memory utilization, CPU count, CPU times, Disk partition, network I/O counter etc.},
  eventtitle = {2015 {{International Conference}} on {{Control Communication}} \& {{Computing India}} ({{ICCC}})},
  keywords = {Benchmark,Cloud computing,Containers,Docker,Kernel,Linux,Radiation detectors,Resource utilization,Virtual machining},
  file = {/Users/finn/Zotero/storage/R8WLJMC5/N et al. - 2015 - Evaluation of Docker containers based on hardware utilization.pdf}
}

@online{PoetryPythonDependency,
  title = {Poetry - {{Python}} Dependency Management and Packaging Made Easy},
  url = {https://python-poetry.org/},
  urldate = {2024-11-03},
  file = {/Users/finn/Zotero/storage/HD6LNZ6D/python-poetry.org.html}
}

@inproceedings{shudlerSpackMeetsSingularity2019,
  title = {Spack Meets Singularity: Creating Movable in-Situ Analysis Stacks with Ease},
  shorttitle = {Spack Meets Singularity},
  booktitle = {Proceedings of the {{Workshop}} on {{In Situ Infrastructures}} for {{Enabling Extreme-Scale Analysis}} and {{Visualization}}},
  author = {Shudler, Sergei and Ferrier, Nicola and Insley, Joseph and Papka, Michael E. and Rizzi, Silvio},
  date = {2019-11-18},
  series = {{{ISAV}} '19},
  pages = {34--38},
  publisher = {Association for Computing Machinery},
  location = {New York, NY, USA},
  doi = {10.1145/3364228.3364682},
  url = {https://dl.acm.org/doi/10.1145/3364228.3364682},
  urldate = {2024-10-31},
  abstract = {In-situ data analysis and visualization is a promising technique to handle the enormous amount of data an extreme-scale application produces. One challenge users often face in adopting in-situ techniques is setting the right environment on a target machine. Platforms such as SENSEI require complex software stacks that consist of various analysis packages and visualization applications. The user has to make sure all these prerequisites exist on the target machine, which often involves compiling and setting them up from scratch. In this paper, we leverage the containers technology (e.g., light-weight virtualization images) and provide users with Singularity containers that encapsulate ready-to-use, movable in-situ software stacks. Moreover, we make use of Spack to ease the process of creating these containers. Finally, we evaluate this solution by running in-situ analysis from within a container on an HPC system.},
  isbn = {978-1-4503-7723-2},
  file = {/Users/finn/Zotero/storage/CJDSSMG2/Shudler et al. - 2019 - Spack meets singularity creating movable in-situ analysis stacks with ease.pdf}
}

@article{sobierajDockerPerformanceEvaluation2024,
  title = {Docker {{Performance Evaluation}} across {{Operating Systems}}},
  author = {Sobieraj, Maciej and Kotyński, Daniel},
  date = {2024-01},
  journaltitle = {Applied Sciences},
  volume = {14},
  number = {15},
  pages = {6672},
  publisher = {Multidisciplinary Digital Publishing Institute},
  issn = {2076-3417},
  doi = {10.3390/app14156672},
  url = {https://www.mdpi.com/2076-3417/14/15/6672},
  urldate = {2024-10-31},
  abstract = {Docker has gained significant popularity in recent years. With the introduction of Docker Desktop for Windows and macOS, there is a need to determine the impact of the operating system on the performance of the Docker platform. This paper aims to investigate the performance of Docker containers based on the operating system. One of the fundamental goals of this study is to conduct a comprehensive analysis of the Docker architecture. This technology utilizes Linux kernel virtualization mechanisms such as namespaces and cgroups. Upon analyzing the distribution of Docker Desktop for Windows and Docker Desktop for macOS, it was discovered that running the Docker environment on these requires a lightweight virtual machine that emulates the Linux system. This information suggests that the additional virtualization layer may hinder the performance of non-Linux operating systems hosting Docker containers. The paper presents a performance test of the Docker runtime on Linux, Microsoft Windows, and macOS. The test evaluated specific aspects of operating system performance on a MacBook computer with an ×86/64 processor architecture. The experiment carried out examined the performance in terms of CPU speed, I/O speed, and network throughput. This test measured the efficiency of software that utilizes various system resources.},
  issue = {15},
  langid = {english},
  keywords = {Docker,operating system,performance tests,virtualization},
  file = {/Users/finn/Zotero/storage/BR6JGAZC/Sobieraj und Kotyński - 2024 - Docker Performance Evaluation across Operating Systems.pdf}
}

@book{stengelStatistikUndAufbereitung2011,
  title = {Statistik und Aufbereitung klinischer Daten},
  author = {Stengel, Dirk and Bhandari, Mohit and Hanson, Beate},
  date = {2011-02-23},
  publisher = {Georg Thieme Verlag},
  abstract = {Dieses hilfreiche ebook erklärt kompakt und sehr anschaulich die Grundlagen statistischer Auswertung und die Präsentation klinischer Daten. - Praktisches Kompendium zum sofortigen Umsetzen - Viele praxisbezogene Tipps - Zahlreiche Merksätze und Zusammenfassungen- Bewusst ohne komplizierte Formeln - Gut gewählte und visualisierte Beispiele aus der Praxis- Sicherheit im Umgang mit dem Thema durch eine leicht verständliche Aufbereitung},
  isbn = {978-3-13-169341-9},
  langid = {ngerman},
  pagetotal = {158},
  keywords = {Medical / Clinical Medicine}
}

@article{watadaEmergingTrendsTechniques2019,
  title = {Emerging {{Trends}}, {{Techniques}} and {{Open Issues}} of {{Containerization}}: {{A Review}}},
  shorttitle = {Emerging {{Trends}}, {{Techniques}} and {{Open Issues}} of {{Containerization}}},
  author = {Watada, Junzo and Roy, Arunava and Kadikar, Ruturaj and Pham, Hoang and Xu, Bing},
  date = {2019},
  journaltitle = {IEEE Access},
  volume = {7},
  pages = {152443--152472},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2019.2945930},
  url = {https://ieeexplore.ieee.org/abstract/document/8861307},
  urldate = {2024-10-31},
  abstract = {Containerization is revolutionizing the way that many industries operate, provisioning major impact to modern computing technologies because it is extra lightweight, highly portable, energy, resource and storage efficient, cost-effective, performance efficient, and extremely quick during boot up. These often facilitate efficient load balancing, low-level system maintenance, server consolidation (for efficient energy and resource utilization) and replication of instances over geographical locations for better fault tolerance to escalate application reliability. However, some recent literature have addressed various challenges (such as complex networking, persistent storage facilities, cross data centers and multicloud supports, security issues, and lack of available, capable container management APIs, etc.) regarding successful container adoption in industries, which might have resulted in a seemingly meager increase in industrial deployments of containerization over the past few years despite bestowing efficient lightweight virtualization. Moreover, a comprehensive overview of containerizations along with their popularity dynamics has still not been found in contemporary literature, which further extends knowledge gap between developers and available technologies. Hence, current study touches upon different technicalities involved in containerization with potential problems and possible solutions along with various important industrial applications to manifest its existing supports and technical hardships. Finally, we have conducted a comprehensive experimental study to compare the performance of VMs, containers and unikernels in terms of CPU utilization, memory footprints, network bandwidth, execution time and technological maturity using standard benchmarks and observed containers to deliver satisfactory performance in almost all aspects, however, are still not free from issues regarding isolation \& security, performance stability, lack of available efficient tools for crossplatform support and persistent storage. Unikernels deliver good performance with VM-like isolation but still need to achieve desired technical maturity (in terms of microprocessor stability, process containment, persistent storage, etc.). VMs, on the other hand, are found to provide stable performance throughout, though bigger memory footprints and slower spin up/down remain their biggest weaknesses.},
  eventtitle = {{{IEEE Access}}},
  keywords = {Cloud computing,containerization,Containers,isolation and security,Linux,management and orchestration,Security,Tools,Virtual machine monitors,Virtualization},
  file = {/Users/finn/Zotero/storage/9DI9V9EQ/Watada et al. - 2019 - Emerging Trends, Techniques and Open Issues of Containerization A Review.pdf;/Users/finn/Zotero/storage/5WRZAS65/8861307.html}
}
